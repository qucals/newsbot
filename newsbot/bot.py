import os
import configparser

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext

import newsbot.config as config
import newsbot.database as database
import newsbot.network as network


class Bot:
    def __init__(self, a_token=None, a_use_context=None):
        self.db = database.DatabaseController

        self._config = configparser.ConfigParser()
        if not os.path.exists(config.BOT_SETTINGS_PATH):
            with open(config.BOT_SETTINGS_PATH, 'w') as configfile:
                config.DEFAULT_SETTINGS.write(configfile)
            self._config = config.DEFAULT_SETTINGS
        self._config.read(config.BOT_SETTINGS_PATH)

        self._token = a_token if a_token else self._config['DEFAULT']['token']
        self._use_context = a_use_context if a_use_context else self._config['DEFAULT']['use_context']

        self._parser = network.NewsSiteParser(self.config['news_url'])
        self._topics = self._parser.get_news_topics(self.config['news_topic_class'])

        self._updater = Updater(token=self._token, use_context=self._use_context)
        self._dispatcher = self._updater.dispatcher

        handler = MessageHandler(Filters.text | Filters.command, self.__handle_message)
        self._dispatcher.add_handler(handler)

        self._main_buttons = [
            [
                '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚è±',
                '–í—ã–±—Ä–∞—Ç—å —Ç–æ–ø–∏–∫–∏ üìñ',
            ]
        ]

        self._states = [
            self.__s_start,
            self.__s_main,
            self.__s_typing_interval,
            self.__s_choosing_topics,
        ]

    @property
    def config(self):
        return dict(self._config['DEFAULT'])

    def start(self):
        self._updater.start_polling()
        self._updater.idle()

    def stop(self):
        self._updater.stop()

    def __handle_message(self, a_update: Update, a_context: CallbackContext):
        user_id = a_update.effective_user.id
        self.db.add_user_if_there_is_not(user_id)

        user_state = self.db.get_user_state(user_id)
        self._states[user_state](a_update, a_context)

    def __s_start(self, a_update: Update, a_context: CallbackContext):
        user_id = a_update.effective_user.id
        user_name = a_update.effective_user.name

        self.db.set_user_state(user_id, 1)

        text = f'–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å habr.com –ø–æ –≤–∞—à–∏–º ' \
               f'–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö ' \
               f'–¥–ª—è –≤–∞—Å —Ç–æ–ø–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.'

        a_context.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=ReplyKeyboardMarkup(self._main_buttons)
        )

    def __s_main(self, a_update: Update, a_context: CallbackContext):
        user_id = a_update.effective_user.id
        user_text = a_update.message.text

        if user_text not in self._main_buttons[0]:
            text = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§•. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ!'
            a_context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=ReplyKeyboardMarkup(self._main_buttons)
            )
        else:
            if user_text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚è±':
                self.db.set_user_state(user_id, 2)

                text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.'
                a_context.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']])
                )
            elif user_text == '–í—ã–±—Ä–∞—Ç—å —Ç–æ–ø–∏–∫–∏ üìñ':
                self.db.set_user_state(user_id, 3)

                text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–æ–ø–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.\n‚úÖ ‚Äì –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–æ–ø–∏–∫ –≤—ã–±—Ä–∞–Ω, ‚ùå ‚Äì –æ–±—Ä–∞—Ç–Ω–æ–µ. –î–ª—è ' \
                       '—Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä".'
                a_context.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=self.__get_keyboard_tor_edit_topics(user_id)
                )

    def __s_typing_interval(self, a_update: Update, a_context: CallbackContext):
        user_id = a_update.effective_user.id
        user_text = a_update.message.text

        if user_text.isdigit():
            self.db.change_user_interval(user_id, user_text)
            self.db.set_user_state(user_id, 1)

            text = f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {user_text}'
            a_context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=ReplyKeyboardMarkup(self._main_buttons)
            )
        elif user_text == '–û—Ç–º–µ–Ω–∞':
            self.db.set_user_state(user_id, 1)
            interval = self.db.get_user_interval(user_id)

            text = f'–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {interval}'
            a_context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=ReplyKeyboardMarkup(self._main_buttons)
            )
        else:
            text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.'
            a_context.bot.send_message(
                chat_id=user_id,
                text=text,
            )

    def __s_choosing_topics(self, a_update: Update, a_context: CallbackContext):
        user_id = a_update.effective_user.id
        user_topic = a_update.message.text

        if user_topic[:-1] in self._topics:
            user_topic = user_topic[:-1]
            if self.db.has_user_topic(user_id, user_topic):
                self.db.remove_topic_of_user(user_id, user_topic)
                text = f'–¢–æ–ø–∏–∫ "{user_topic}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!'
            else:
                self.db.add_topic_to_user(user_id, user_topic)
                text = f'–¢–æ–ø–∏–∫ "{user_topic}" —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!'
            a_context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=self.__get_keyboard_tor_edit_topics(user_id)
            )
        elif user_topic == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä':
            self.db.set_user_state(user_id, 1)

            text = '–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±–æ—Ä—É —Ç–æ–ø–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.'
            a_context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=ReplyKeyboardMarkup(self._main_buttons)
            )
        else:
            text = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫ ü§•. –î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!'
            a_context.bot.send_message(
                chat_id=user_id,
                text=text
            )

    def __get_keyboard_tor_edit_topics(self, a_user_id):
        user_chosen_topics = self.db.get_users_topics(a_user_id)

        btns_text = []
        for topic in self._topics:
            if topic in user_chosen_topics:
                btns_text.append(f'{topic}‚úÖ')
            else:
                btns_text.append(f'{topic}‚ùå')

        keyboard = []
        tmp = []

        for idx, text in enumerate(btns_text):
            if (idx + 1) % 3 != 0:
                tmp.append(KeyboardButton(text))
            else:
                keyboard.append(tmp.copy())
                tmp.clear()

        if len(tmp) + 1 % 3 == 0:
            keyboard.append(tmp.copy())
            tmp.clear()
        tmp.append(KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä'))
        keyboard.append(tmp)

        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
